{"ast":null,"code":"var _jsxFileName = \"/home/pplo/Documents/nebrasd/src/context/ProgressContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { useState, useEffect, createContext, useContext } from 'react';\nimport { tracksData } from '../data/tracksData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProgressContext = /*#__PURE__*/createContext();\nexport const ProgressProvider = ({\n  children\n}) => {\n  _s();\n  const [progress, setProgress] = useState({});\n  useEffect(() => {\n    try {\n      const savedProgress = localStorage.getItem('nebrasProgress');\n      if (savedProgress) {\n        setProgress(JSON.parse(savedProgress));\n      }\n    } catch (error) {\n      console.error(\"Failed to load progress from localStorage:\", error);\n    }\n  }, []);\n  const updateProgress = (trackId, isFinalQuiz, sessionId) => {\n    const newProgress = {\n      ...progress\n    };\n    if (!newProgress[trackId]) {\n      newProgress[trackId] = {\n        sessions: {},\n        finalQuiz: false\n      };\n    }\n    if (isFinalQuiz) {\n      newProgress[trackId].finalQuiz = true;\n    } else if (sessionId) {\n      if (!newProgress[trackId].sessions) {\n        newProgress[trackId].sessions = {};\n      }\n      newProgress[trackId].sessions[sessionId] = true;\n    }\n    setProgress(newProgress);\n    try {\n      localStorage.setItem('nebrasProgress', JSON.stringify(newProgress));\n    } catch (error) {\n      console.error(\"Failed to save progress to localStorage:\", error);\n    }\n  };\n  const isTrackCompleted = trackId => {\n    return !!(progress[trackId] && progress[trackId].finalQuiz);\n  };\n  const isSessionCompleted = (trackId, sessionId) => {\n    return !!(progress[trackId] && progress[trackId].sessions && progress[trackId].sessions[sessionId]);\n  };\n  const areAllSessionsCompleted = trackId => {\n    const track = tracksData.find(t => t.id === trackId);\n    if (!track || !progress[trackId]) return false;\n    if (!track.sessions) return false;\n    return track.sessions.every(session => progress[trackId].sessions && progress[trackId].sessions[session.id]);\n  };\n  return /*#__PURE__*/_jsxDEV(ProgressContext.Provider, {\n    value: {\n      progress,\n      updateProgress,\n      isTrackCompleted,\n      isSessionCompleted,\n      areAllSessionsCompleted\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n_s(ProgressProvider, \"1GWlvcYPVqypIG6wDbF2Qi05EuU=\");\n_c = ProgressProvider;\nexport const useProgress = () => {\n  _s2();\n  return useContext(ProgressContext);\n};\n_s2(useProgress, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"ProgressProvider\");","map":{"version":3,"names":["React","useState","useEffect","createContext","useContext","tracksData","jsxDEV","_jsxDEV","ProgressContext","ProgressProvider","children","_s","progress","setProgress","savedProgress","localStorage","getItem","JSON","parse","error","console","updateProgress","trackId","isFinalQuiz","sessionId","newProgress","sessions","finalQuiz","setItem","stringify","isTrackCompleted","isSessionCompleted","areAllSessionsCompleted","track","find","t","id","every","session","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useProgress","_s2","$RefreshReg$"],"sources":["/home/pplo/Documents/nebrasd/src/context/ProgressContext.js"],"sourcesContent":["import React, { useState, useEffect, createContext, useContext } from 'react';\nimport { tracksData } from '../data/tracksData';\n\nconst ProgressContext = createContext();\n\nexport const ProgressProvider = ({ children }) => {\n    const [progress, setProgress] = useState({});\n\n    useEffect(() => {\n        try {\n            const savedProgress = localStorage.getItem('nebrasProgress');\n            if (savedProgress) {\n                setProgress(JSON.parse(savedProgress));\n            }\n        } catch (error) {\n            console.error(\"Failed to load progress from localStorage:\", error);\n        }\n    }, []);\n\n    const updateProgress = (trackId, isFinalQuiz, sessionId) => {\n        const newProgress = { ...progress };\n\n        if (!newProgress[trackId]) {\n            newProgress[trackId] = { sessions: {}, finalQuiz: false };\n        }\n\n        if (isFinalQuiz) {\n            newProgress[trackId].finalQuiz = true;\n        } else if (sessionId) {\n            if (!newProgress[trackId].sessions) {\n                newProgress[trackId].sessions = {};\n            }\n            newProgress[trackId].sessions[sessionId] = true;\n        }\n\n        setProgress(newProgress);\n        try {\n            localStorage.setItem('nebrasProgress', JSON.stringify(newProgress));\n        } catch (error) {\n            console.error(\"Failed to save progress to localStorage:\", error);\n        }\n    };\n    \n    const isTrackCompleted = (trackId) => {\n        return !!(progress[trackId] && progress[trackId].finalQuiz);\n    };\n\n    const isSessionCompleted = (trackId, sessionId) => {\n        return !!(progress[trackId] && progress[trackId].sessions && progress[trackId].sessions[sessionId]);\n    };\n\n    const areAllSessionsCompleted = (trackId) => {\n        const track = tracksData.find(t => t.id === trackId);\n        if (!track || !progress[trackId]) return false;\n        if (!track.sessions) return false;\n        return track.sessions.every(session => progress[trackId].sessions && progress[trackId].sessions[session.id]);\n    };\n\n    return (\n        <ProgressContext.Provider value={{ progress, updateProgress, isTrackCompleted, isSessionCompleted, areAllSessionsCompleted }}>\n            {children}\n        </ProgressContext.Provider>\n    );\n};\n\nexport const useProgress = () => useContext(ProgressContext);\n\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,aAAa,EAAEC,UAAU,QAAQ,OAAO;AAC7E,SAASC,UAAU,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhD,MAAMC,eAAe,gBAAGL,aAAa,CAAC,CAAC;AAEvC,OAAO,MAAMM,gBAAgB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC9C,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACZ,IAAI;MACA,MAAMY,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAC,gBAAgB,CAAC;MAC5D,IAAIF,aAAa,EAAE;QACfD,WAAW,CAACI,IAAI,CAACC,KAAK,CAACJ,aAAa,CAAC,CAAC;MAC1C;IACJ,CAAC,CAAC,OAAOK,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,4CAA4C,EAAEA,KAAK,CAAC;IACtE;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,cAAc,GAAGA,CAACC,OAAO,EAAEC,WAAW,EAAEC,SAAS,KAAK;IACxD,MAAMC,WAAW,GAAG;MAAE,GAAGb;IAAS,CAAC;IAEnC,IAAI,CAACa,WAAW,CAACH,OAAO,CAAC,EAAE;MACvBG,WAAW,CAACH,OAAO,CAAC,GAAG;QAAEI,QAAQ,EAAE,CAAC,CAAC;QAAEC,SAAS,EAAE;MAAM,CAAC;IAC7D;IAEA,IAAIJ,WAAW,EAAE;MACbE,WAAW,CAACH,OAAO,CAAC,CAACK,SAAS,GAAG,IAAI;IACzC,CAAC,MAAM,IAAIH,SAAS,EAAE;MAClB,IAAI,CAACC,WAAW,CAACH,OAAO,CAAC,CAACI,QAAQ,EAAE;QAChCD,WAAW,CAACH,OAAO,CAAC,CAACI,QAAQ,GAAG,CAAC,CAAC;MACtC;MACAD,WAAW,CAACH,OAAO,CAAC,CAACI,QAAQ,CAACF,SAAS,CAAC,GAAG,IAAI;IACnD;IAEAX,WAAW,CAACY,WAAW,CAAC;IACxB,IAAI;MACAV,YAAY,CAACa,OAAO,CAAC,gBAAgB,EAAEX,IAAI,CAACY,SAAS,CAACJ,WAAW,CAAC,CAAC;IACvE,CAAC,CAAC,OAAON,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;IACpE;EACJ,CAAC;EAED,MAAMW,gBAAgB,GAAIR,OAAO,IAAK;IAClC,OAAO,CAAC,EAAEV,QAAQ,CAACU,OAAO,CAAC,IAAIV,QAAQ,CAACU,OAAO,CAAC,CAACK,SAAS,CAAC;EAC/D,CAAC;EAED,MAAMI,kBAAkB,GAAGA,CAACT,OAAO,EAAEE,SAAS,KAAK;IAC/C,OAAO,CAAC,EAAEZ,QAAQ,CAACU,OAAO,CAAC,IAAIV,QAAQ,CAACU,OAAO,CAAC,CAACI,QAAQ,IAAId,QAAQ,CAACU,OAAO,CAAC,CAACI,QAAQ,CAACF,SAAS,CAAC,CAAC;EACvG,CAAC;EAED,MAAMQ,uBAAuB,GAAIV,OAAO,IAAK;IACzC,MAAMW,KAAK,GAAG5B,UAAU,CAAC6B,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKd,OAAO,CAAC;IACpD,IAAI,CAACW,KAAK,IAAI,CAACrB,QAAQ,CAACU,OAAO,CAAC,EAAE,OAAO,KAAK;IAC9C,IAAI,CAACW,KAAK,CAACP,QAAQ,EAAE,OAAO,KAAK;IACjC,OAAOO,KAAK,CAACP,QAAQ,CAACW,KAAK,CAACC,OAAO,IAAI1B,QAAQ,CAACU,OAAO,CAAC,CAACI,QAAQ,IAAId,QAAQ,CAACU,OAAO,CAAC,CAACI,QAAQ,CAACY,OAAO,CAACF,EAAE,CAAC,CAAC;EAChH,CAAC;EAED,oBACI7B,OAAA,CAACC,eAAe,CAAC+B,QAAQ;IAACC,KAAK,EAAE;MAAE5B,QAAQ;MAAES,cAAc;MAAES,gBAAgB;MAAEC,kBAAkB;MAAEC;IAAwB,CAAE;IAAAtB,QAAA,EACxHA;EAAQ;IAAA+B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAEnC,CAAC;AAACjC,EAAA,CA1DWF,gBAAgB;AAAAoC,EAAA,GAAhBpC,gBAAgB;AA4D7B,OAAO,MAAMqC,WAAW,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAM3C,UAAU,CAACI,eAAe,CAAC;AAAA;AAACuC,GAAA,CAAhDD,WAAW;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}